Problem

Разработка пользовательского интерфейса. Каждый продукт нуждается в пользовательском интеряейсе. Сайты, мобильные приложения, веб приложения, игры, embed системы (различные терминалы, банкоматы) - вся IT отрасль разрабатывает интерфейсы. Решения абсолютно разные и нестандартизированные.
Мы сталкивались с разработкой, тестированием, развитием и использований всех разновидностей интерфейсов.

С точки зрения разработки проблемы выгледят так:
  Интерфейсы не сильно отличаются друг от друга. Уже после двадцатой разработки интерфейсных решений задачи становятся однотипными и не интересными. Используются различные фреймворки и решения ставятся на поток. Происходит обрастание кровавым энтерпрайзом. Большая часть имеющихся на рынке свободных библиотек компонентов и подходов не являются серебряной пулей и мягко говоря не идеальны. Это выливается в нестабильность решений, множество сложноотлавливаемых багов и сложность реализации любого незапланированного функционала.

С точки зрения тестирования:
  Ручные тестировщики. Постоянное тестирование одних и тех же ситуаций из релиза в релиз. Выплывание сложных багов завязанных на фазы луны.
  Автоматические тестировщики. Сложность тестирования интерфейсов. Необходимость понимания происходящих внутри процессов. Хорошие автоматические тестировщики выходят из бывших разработчиков, но им нет смысла становиться тестировщиками.

С точки зрения пользователей:
  Нестабильные интерфейсы. Непредсказуемость поведения. Не работающие привычные действия в различных приложениях.

Все эти проблемы решаются только количественным и качественным заваливанием проблемы высококачественными и дорогими специалистами.


Better world

В 1992 году майкрософт выпустил вторую версию visual basic. Это был прорыв в разработке пользовательских интерфейсов. Пусть язык был медленным, но это решение породило целое море приложений. С этого момента любой мог прочитать книгу для чайников и сделать приложение под windows, которое будет решать его прикладную задачу. Интерфейс накидывался мышью на форму. Десять кнопок, пять полей ввода, страница простого кода и проблема решена. Но windows.
Удивительно, но сегодня никто так ещё и не выпустил полноценного продукта делающего ровно то же самое на любой платформе.


Solution

Представьте себе среду разработки в которой любой пользователь может создать своё приложение с помощью только визуальных средств. Не надо писать код инициализации кнопки, прописывать её положение, думать о том что размер экрана может измениться и тогда надо пересчитывать эти координаты. Простым перетягиванием компонентов.
Однажды сделанный интерфейс будет масштабироваться в версию веб приложения, дестопные приложения (windows, linux, osx), мобильное приложение, приложение для терминала. 
Это свободный продукт. У него есть репозиторий компонентов тесно интегрированный в IDE. Если нужно особое поле ввода с закруглёнными углами - разработчик просто вбивает в поиск rounded input и находит готовые компоненты отсортированные по количеству скачиваний. После чего берёт понравившийся и тянет его на экран прототипирования. Если нравится - использует. Все компоненты работают на всех устройствах. Они стабильны и отлажены сообществом. 
Если чего-то не хватает можно написать свой компонент. Чётко прописать интерфейс взаимодействия (входные и выходные данные) и получить документацию. Все компоненты опираются на модель данных и имеют чёткое состояние, которое можно получить в любой момент, как с отдельного элемента, так и со всего экрана. 
Имея чёткое начальное состояние разработчик записывает последовательность действий (похоже на макросы в word\excel) и получает конечное состояние. Если конечное состояние удовлетворяет, то в один клик 2 состояния + последовательность действий превращаются в готовый тест, который будет проходить проверку при каждой сборке релиза.
У компонентов есть события и данные. Визуальный редактор позволяет завязать разные компоненты на одни и те же данные, например, список пользователей и свойства конкретного аккаунта являются одной и той же сущностью и при изменении конкретного аккаунта в списке всех пользователей тоже происходят изменения. Это принцип реактивного функционального программирования. На наступление события же можно как написать функцию обработки, так и связать с некоторым другим действием. Например, нажатие ctrl+enter в поле ввода можно связать с явной кнопкой отсылки запроса на сервер.


Conclusion

Да, это решение сложное и на пути будет много трудностей и проблем, но мы уже сталкивались и решали абсолютно все из них в других проектах. Это решение способно перевернуть всю индустрию разработки приложений.